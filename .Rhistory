library(readr)
library(readr)
library(readxl)
library(tidyverse)
library(readxl)
library(tidyverse)
library(stringr)
library(stringr)
library(lubridate)
library(imputeTS)
library(devtools)
library(fredr)    # esto lo necesito para las bases de FRED
library(jsonlite) # esto lo necesito para las bases de BLS que las baja en formato json
library(blsAPI) # APi para sacar bases de BLS
install_github("mikeasilva/blsAPI")
install_github("mikeasilva/blsAPI")
library(blsAPI) # APi para sacar bases de BLS
install_github("mikeasilva/blsAPI")
library(blsAPI) # APi para sacar bases de BLS
library(blsAPI) # APi para sacar bases de BLS
library(readr)
library(readxl)
library(tidyverse)
library(stringr)
library(lubridate)
library(imputeTS)
library(devtools)
library(fredr)    # esto lo necesito para las bases de FRED
library(jsonlite) # esto lo necesito para las bases de BLS que las baja en formato json
library(blsAPI) # APi para sacar bases de BLS
load_all()
load_all()
install_github("mikeasilva/blsAPI")
install_github("mikeasilva/blsAPI")
#función de cambio porcentual
cambio_porcentual <- function(x) {x/lag(x) - 1}
#función de cambio porcentual
cambio_porcentual <- function(x) {x/lag(x) - 1}
load_all()
#función de cambio porcentual
cambio_porcentual <- function(x) {x/lag(x) - 1}
fredr_set_key("7f7cd1ede23f57c87d80eff57ea19eab")
base_manuf_us <-fredr_series_observations(series_id = "IPGMFSQ")
base_manuf_us <- base_manuf_us %>%
select(date,value) %>%
dplyr::rename(IPGMFSQ=value,DATE=date)
# Levantamos la historica de employment
base_employ_us2 <- read_csv("../data/employ_actualizado.csv")
# Levantamos la historica de employment
base_employ_us2 <- read_csv("../data/employ_actualizado.csv")
# Bajamos la actualizacion de la api de BLS con los ultimos datos y le damos el mismo formato que la historica antes cargada
base_employ_us <- blsAPI('CES3000000001')
# Bajamos la actualizacion de la api de BLS con los ultimos datos y le damos el mismo formato que la historica antes cargada
base_employ_us <- blsAPI('CES3000000001')
base_employ_us <- fromJSON(base_employ_us)
actualiza_employ <- base_employ_us$Results$series[[1,2]]
actualiza_employ <- actualiza_employ %>%
mutate("Series ID"= "CES3000000001") %>%
select("Series ID",everything()) %>%
select(-c(periodName,latest,footnotes)) %>%
dplyr::rename(Year=year,Value=value,Period=period)
actualiza_employ$Year <- as.numeric(actualiza_employ$Year)
actualiza_employ$Value <- as.numeric(actualiza_employ$Value)
# Aca unimos historica con la actualizada y eliminamos los meses duplicados
actualiza_employ <- rbind(base_employ_us2,actualiza_employ)
actualiza_employ <- actualiza_employ %>%
arrange(Year,Period)
View(actualiza_employ)
###Empleo
employ_us <- base_employ_us %>%
mutate(mes  = str_remove(base_employ_us$Period, "M"),
fecha = parse_date_time(paste0(Year, mes), orders = "ym"),
fecha = ymd(fecha),
i_empleo_us=generar_indice(serie = Value,
fecha = fecha,
fecha_base = "2017-01-01")) %>%
select(fecha, i_empleo_us)
View(actualiza_employ)
View(base_employ_us)
View(base_employ_us2)
View(base_manuf_us)
View(actualiza_employ)
View(actualiza_employ)
View(actualiza_employ)
###Empleo
employ_us <- actualiza_employ %>%
mutate(mes  = str_remove(actualiza_employ$Period, "M"),
fecha = parse_date_time(paste0(Year, mes), orders = "ym"),
fecha = ymd(fecha),
i_empleo_us=generar_indice(serie = Value,
fecha = fecha,
fecha_base = "2017-01-01")) %>%
select(fecha, i_empleo_us)
View(employ_us)
View(base_manuf_us)
View(base_manuf_us)
### Producción
manuf_us <-  base_manuf_us %>%
mutate(fecha = DATE,
i_manuf_us=generar_indice(serie = IPGMFSQ,
fecha = fecha,
fecha_base = "2017-01-01")) %>%
select(fecha, i_manuf_us)
View(manuf_us)
View(base_employ_us2)
View(base_manuf_us)
View(base_manuf_us)
View(base_manuf_us)
View(base_manuf_us)
View(employ_us)
### Producción
manuf_us <-  base_manuf_us %>%
mutate(fecha = DATE,
i_manuf_us=generar_indice(serie = IPGMFSQ,
fecha = fecha,
fecha_base = "2017-01-01")) %>%
select(fecha, i_manuf_us)
View(manuf_us)
View(manuf_us)
productividad_us <- employ_us %>%
left_join(manuf_us, by = "fecha") %>%
mutate(i_productividad_us = i_manuf_us/i_empleo_us) %>%
select(fecha, i_productividad_us) %>%
filter(fecha >= "1972-01-01") %>%
complete(fecha = seq.Date(min(fecha), max(fecha), by="month")) %>% #agrego todos los meses
mutate(i_productividad_us = na_interpolation(i_productividad_us, option = 'linear')) #imputo
View(productividad_us)
base_ipc_us <- read_csv("../data/cpi.csv")
base_ipc_us
test <- blsAPI('CUSR0000SA0')
test
test <- fromJSON(test)
View(test)
test
test
View(test)
actualiza_ipc <- test$Results$series[[1,2]]
View(actualiza_ipc)
View(actualiza_ipc)
View(actualiza_ipc)
View(actualiza_ipc)
actualiza_ipc <- actualiza_ipc %>%
mutate("Series ID"= "CUSR0000SA0") %>%
select("Series ID",everything()) %>%
select(-c(periodName,latest,footnotes)) %>%
dplyr::rename(Year=year,Value=value,Period=period)
View(actualiza_ipc)
View(actualiza_ipc)
View(actualiza_ipc)
base_ipc_us
actualiza_ipc$Year <- as.numeric(actualiza_ipc$Year)
actualiza_ipc$Value <- as.numeric(actualiza_ipc$Value)
actualiza_ipc <- rbind(base_ipc_us,actualiza_ipc)
View(actualiza_ipc)
